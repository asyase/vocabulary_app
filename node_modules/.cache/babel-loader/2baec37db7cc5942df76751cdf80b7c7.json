{"ast":null,"code":"import { makeAutoObservable, runInAction } from \"mobx\";\nconst url = 'https://6396034b90ac47c6807aa35e.mockapi.io';\nexport default class WordStore {\n  constructor() {\n    this.words = [];\n    this.isLoaded = false;\n    this.error = '';\n\n    this.translateToEstonian = russianText => {\n      const translationMap = {\n        \"кошка\": \"kass\",\n        \"кукуруза\": \"mais\",\n        \"бабочка\": \"liblikas\",\n        \"ежик\": \"siil\",\n        \"ребенок\": \"laps\",\n        \"мать\": \"ema\",\n        \"отец\": \"isa\",\n        \"тормоз\": \"pidur\",\n        \"тормозная жидкость\": \"pidurivedelik\",\n        \"лампы\": \"lambid\",\n        \"собака\": \"koer\",\n        \"животные\": \"animals\",\n        \"растения\": \"plants\",\n        \"насекомое\": \"insect\",\n        \"семья\": \"family\",\n        \"автомобиль\": \"car\"\n      };\n      return translationMap[russianText] || russianText;\n    };\n\n    this.loadData = () => {\n      fetch(url + '/words').then(result => {\n        if (result.ok) {\n          return result.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      }).then(words => {\n        runInAction(() => {\n          const updatedWords = words.map(word => ({ ...word,\n            russian: this.translateToEstonian(word.russian),\n            tags: this.translateToEstonian(word.tags)\n          }));\n          this.words = updatedWords;\n          this.isLoaded = true;\n        });\n      }).catch(error => {\n        runInAction(() => {\n          this.isLoaded = true;\n          this.error = error.message;\n        });\n      });\n    };\n\n    this.add = newWord => {\n      fetch(url + '/words', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(newWord)\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      }).then(() => this.loadData()).catch(error => {\n        runInAction(() => {\n          this.error = error.message;\n        });\n      });\n    };\n\n    this.remove = id => {\n      fetch(url + `/words/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      }).then(() => this.loadData()).catch(error => {\n        runInAction(() => {\n          this.isLoaded = true;\n          this.error = error.message;\n        });\n      });\n    };\n\n    this.update = (id, data) => {\n      fetch(url + `/words/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(data)\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      }).then(() => this.loadData()).catch(error => {\n        runInAction(() => {\n          this.error = error.message;\n        });\n      });\n    };\n\n    this.saerchTearm = '';\n\n    this.search = value => {\n      this.saerchTearm = value;\n    };\n\n    this.isValid = element => element.length > 0 ? true : false;\n\n    this.count = 0;\n    this.learnedWords = 0;\n\n    this.increment = () => {\n      this.count = this.count < this.words.length - 1 ? this.count + 1 : 0;\n      this.learnedWords = this.learnedWords < this.words.length ? this.learnedWords + 1 : this.words.length;\n    };\n\n    this.decrement = () => {\n      this.count = this.count > 0 ? this.count - 1 : this.words.length - 1;\n    };\n\n    makeAutoObservable(this);\n  }\n\n}","map":{"version":3,"names":["makeAutoObservable","runInAction","url","WordStore","constructor","words","isLoaded","error","translateToEstonian","russianText","translationMap","loadData","fetch","then","result","ok","json","Error","updatedWords","map","word","russian","tags","catch","message","add","newWord","method","headers","body","JSON","stringify","response","remove","id","update","data","saerchTearm","search","value","isValid","element","length","count","learnedWords","increment","decrement"],"sources":["/Users/anastasijaselevjorstova/Desktop/vocabulary_flashcards/vocabulary_flashcards/src/store/wordStore.js"],"sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\nconst url = 'https://6396034b90ac47c6807aa35e.mockapi.io';\n\nexport default class WordStore {\n\n    words = [];\n    isLoaded = false;\n    error = '';\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    translateToEstonian = (russianText) => {\n        const translationMap = {\n            \"кошка\": \"kass\",\n            \"кукуруза\": \"mais\",\n            \"бабочка\": \"liblikas\",\n            \"ежик\": \"siil\",\n            \"ребенок\": \"laps\",\n            \"мать\": \"ema\",\n            \"отец\": \"isa\",\n            \"тормоз\": \"pidur\",\n            \"тормозная жидкость\": \"pidurivedelik\",\n            \"лампы\": \"lambid\",\n            \"собака\": \"koer\",\n            \"животные\": \"animals\",\n            \"растения\": \"plants\",\n            \"насекомое\": \"insect\",\n            \"семья\": \"family\",\n            \"автомобиль\": \"car\"\n        };\n        return translationMap[russianText] || russianText;\n    }\n\n    loadData = () => {\n        fetch(url + '/words')\n            .then((result) => {\n                if (result.ok) {\n                    return result.json();\n                } else {\n                    throw new Error('Something went wrong ...');\n                }\n            })\n            .then((words) => {\n                runInAction(() => {\n                    const updatedWords = words.map(word => ({\n                        ...word,\n                        russian: this.translateToEstonian(word.russian),\n                        tags: this.translateToEstonian(word.tags)\n                    }));\n                    this.words = updatedWords;\n                    this.isLoaded = true;\n                });\n            }).catch(error => {\n                runInAction(() => {\n                    this.isLoaded = true;\n                    this.error = error.message;\n                });\n            });\n    }\n\n    add = (newWord) => {\n        fetch(url + '/words', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json;charset=utf-8'\n            },\n            body: JSON.stringify(newWord)\n        })\n            .then((response) => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    throw new Error('Something went wrong ...');\n                }\n            })\n            .then(() => this.loadData())\n            .catch(error => {\n                runInAction(() => {\n                    this.error = error.message;\n                });\n            });\n    }\n\n    remove = (id) => {\n        fetch(url + `/words/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json;charset=utf-8'\n            }\n        })\n            .then((response) => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    throw new Error('Something went wrong ...');\n                }\n            })\n            .then(() => this.loadData())\n            .catch(error => {\n                runInAction(() => {\n                    this.isLoaded = true;\n                    this.error = error.message;\n                });\n            });\n    }\n\n    update = (id, data) => {\n        fetch(url + `/words/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json;charset=utf-8'\n            },\n            body: JSON.stringify(data)\n        })\n            .then((response) => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    throw new Error('Something went wrong ...');\n                }\n            })\n            .then(() => this.loadData())\n            .catch(error => {\n                runInAction(() => {\n                    this.error = error.message;\n                });\n            });\n    }\n\n    saerchTearm = '';\n\n    search = (value) => {\n        this.saerchTearm = value;\n    }\n    \n    isValid = (element) => (element.length > 0) ? true : false;\n\n    count = 0;\n    learnedWords = 0;\n\n    increment = () => {\n        this.count = this.count < this.words.length - 1 ? this.count + 1 : 0;\n        this.learnedWords = this.learnedWords < this.words.length  ? this.learnedWords + 1 : this.words.length;\n    }\n\n    decrement = () => {\n        this.count = this.count > 0 ? this.count - 1 : this.words.length - 1;\n    }\n}\n"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,WAA7B,QAAgD,MAAhD;AACA,MAAMC,GAAG,GAAG,6CAAZ;AAEA,eAAe,MAAMC,SAAN,CAAgB;EAM3BC,WAAW,GAAG;IAAA,KAJdC,KAIc,GAJN,EAIM;IAAA,KAHdC,QAGc,GAHH,KAGG;IAAA,KAFdC,KAEc,GAFN,EAEM;;IAAA,KAIdC,mBAJc,GAISC,WAAD,IAAiB;MACnC,MAAMC,cAAc,GAAG;QACnB,SAAS,MADU;QAEnB,YAAY,MAFO;QAGnB,WAAW,UAHQ;QAInB,QAAQ,MAJW;QAKnB,WAAW,MALQ;QAMnB,QAAQ,KANW;QAOnB,QAAQ,KAPW;QAQnB,UAAU,OARS;QASnB,sBAAsB,eATH;QAUnB,SAAS,QAVU;QAWnB,UAAU,MAXS;QAYnB,YAAY,SAZO;QAanB,YAAY,QAbO;QAcnB,aAAa,QAdM;QAenB,SAAS,QAfU;QAgBnB,cAAc;MAhBK,CAAvB;MAkBA,OAAOA,cAAc,CAACD,WAAD,CAAd,IAA+BA,WAAtC;IACH,CAxBa;;IAAA,KA0BdE,QA1Bc,GA0BH,MAAM;MACbC,KAAK,CAACV,GAAG,GAAG,QAAP,CAAL,CACKW,IADL,CACWC,MAAD,IAAY;QACd,IAAIA,MAAM,CAACC,EAAX,EAAe;UACX,OAAOD,MAAM,CAACE,IAAP,EAAP;QACH,CAFD,MAEO;UACH,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;QACH;MACJ,CAPL,EAQKJ,IARL,CAQWR,KAAD,IAAW;QACbJ,WAAW,CAAC,MAAM;UACd,MAAMiB,YAAY,GAAGb,KAAK,CAACc,GAAN,CAAUC,IAAI,KAAK,EACpC,GAAGA,IADiC;YAEpCC,OAAO,EAAE,KAAKb,mBAAL,CAAyBY,IAAI,CAACC,OAA9B,CAF2B;YAGpCC,IAAI,EAAE,KAAKd,mBAAL,CAAyBY,IAAI,CAACE,IAA9B;UAH8B,CAAL,CAAd,CAArB;UAKA,KAAKjB,KAAL,GAAaa,YAAb;UACA,KAAKZ,QAAL,GAAgB,IAAhB;QACH,CARU,CAAX;MASH,CAlBL,EAkBOiB,KAlBP,CAkBahB,KAAK,IAAI;QACdN,WAAW,CAAC,MAAM;UACd,KAAKK,QAAL,GAAgB,IAAhB;UACA,KAAKC,KAAL,GAAaA,KAAK,CAACiB,OAAnB;QACH,CAHU,CAAX;MAIH,CAvBL;IAwBH,CAnDa;;IAAA,KAqDdC,GArDc,GAqDPC,OAAD,IAAa;MACfd,KAAK,CAACV,GAAG,GAAG,QAAP,EAAiB;QAClByB,MAAM,EAAE,MADU;QAElBC,OAAO,EAAE;UACL,gBAAgB;QADX,CAFS;QAKlBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,OAAf;MALY,CAAjB,CAAL,CAOKb,IAPL,CAOWmB,QAAD,IAAc;QAChB,IAAIA,QAAQ,CAACjB,EAAb,EAAiB;UACb,OAAOiB,QAAQ,CAAChB,IAAT,EAAP;QACH,CAFD,MAEO;UACH,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;QACH;MACJ,CAbL,EAcKJ,IAdL,CAcU,MAAM,KAAKF,QAAL,EAdhB,EAeKY,KAfL,CAeWhB,KAAK,IAAI;QACZN,WAAW,CAAC,MAAM;UACd,KAAKM,KAAL,GAAaA,KAAK,CAACiB,OAAnB;QACH,CAFU,CAAX;MAGH,CAnBL;IAoBH,CA1Ea;;IAAA,KA4EdS,MA5Ec,GA4EJC,EAAD,IAAQ;MACbtB,KAAK,CAACV,GAAG,GAAI,UAASgC,EAAG,EAApB,EAAuB;QACxBP,MAAM,EAAE,QADgB;QAExBC,OAAO,EAAE;UACL,gBAAgB;QADX;MAFe,CAAvB,CAAL,CAMKf,IANL,CAMWmB,QAAD,IAAc;QAChB,IAAIA,QAAQ,CAACjB,EAAb,EAAiB;UACb,OAAOiB,QAAQ,CAAChB,IAAT,EAAP;QACH,CAFD,MAEO;UACH,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;QACH;MACJ,CAZL,EAaKJ,IAbL,CAaU,MAAM,KAAKF,QAAL,EAbhB,EAcKY,KAdL,CAcWhB,KAAK,IAAI;QACZN,WAAW,CAAC,MAAM;UACd,KAAKK,QAAL,GAAgB,IAAhB;UACA,KAAKC,KAAL,GAAaA,KAAK,CAACiB,OAAnB;QACH,CAHU,CAAX;MAIH,CAnBL;IAoBH,CAjGa;;IAAA,KAmGdW,MAnGc,GAmGL,CAACD,EAAD,EAAKE,IAAL,KAAc;MACnBxB,KAAK,CAACV,GAAG,GAAI,UAASgC,EAAG,EAApB,EAAuB;QACxBP,MAAM,EAAE,KADgB;QAExBC,OAAO,EAAE;UACL,gBAAgB;QADX,CAFe;QAKxBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeK,IAAf;MALkB,CAAvB,CAAL,CAOKvB,IAPL,CAOWmB,QAAD,IAAc;QAChB,IAAIA,QAAQ,CAACjB,EAAb,EAAiB;UACb,OAAOiB,QAAQ,CAAChB,IAAT,EAAP;QACH,CAFD,MAEO;UACH,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;QACH;MACJ,CAbL,EAcKJ,IAdL,CAcU,MAAM,KAAKF,QAAL,EAdhB,EAeKY,KAfL,CAeWhB,KAAK,IAAI;QACZN,WAAW,CAAC,MAAM;UACd,KAAKM,KAAL,GAAaA,KAAK,CAACiB,OAAnB;QACH,CAFU,CAAX;MAGH,CAnBL;IAoBH,CAxHa;;IAAA,KA0Hda,WA1Hc,GA0HA,EA1HA;;IAAA,KA4HdC,MA5Hc,GA4HJC,KAAD,IAAW;MAChB,KAAKF,WAAL,GAAmBE,KAAnB;IACH,CA9Ha;;IAAA,KAgIdC,OAhIc,GAgIHC,OAAD,IAAcA,OAAO,CAACC,MAAR,GAAiB,CAAlB,GAAuB,IAAvB,GAA8B,KAhIvC;;IAAA,KAkIdC,KAlIc,GAkIN,CAlIM;IAAA,KAmIdC,YAnIc,GAmIC,CAnID;;IAAA,KAqIdC,SArIc,GAqIF,MAAM;MACd,KAAKF,KAAL,GAAa,KAAKA,KAAL,GAAa,KAAKtC,KAAL,CAAWqC,MAAX,GAAoB,CAAjC,GAAqC,KAAKC,KAAL,GAAa,CAAlD,GAAsD,CAAnE;MACA,KAAKC,YAAL,GAAoB,KAAKA,YAAL,GAAoB,KAAKvC,KAAL,CAAWqC,MAA/B,GAAyC,KAAKE,YAAL,GAAoB,CAA7D,GAAiE,KAAKvC,KAAL,CAAWqC,MAAhG;IACH,CAxIa;;IAAA,KA0IdI,SA1Ic,GA0IF,MAAM;MACd,KAAKH,KAAL,GAAa,KAAKA,KAAL,GAAa,CAAb,GAAiB,KAAKA,KAAL,GAAa,CAA9B,GAAkC,KAAKtC,KAAL,CAAWqC,MAAX,GAAoB,CAAnE;IACH,CA5Ia;;IACV1C,kBAAkB,CAAC,IAAD,CAAlB;EACH;;AAR0B"},"metadata":{},"sourceType":"module"}